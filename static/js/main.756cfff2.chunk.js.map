{"version":3,"sources":["components/TaskList.jsx","App.js","serviceWorker.js","index.js"],"names":["TaskList","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","taskList","inherits","createClass","key","value","taskName","slice","push","setState","taskNameInput","focus","target","charCode","newTask","i","concat","_this2","output","_loop","react_default","a","createElement","TaskList_Task","onClick","deleteTask","length","_this3","Card","style","width","Body","Title","InputGroup","className","FormControl","placeholder","ref","onKeyPress","handleKeyPress","Append","Button","renderTaskList","Component","Task","_Component2","apply","arguments","disabled","variant","App","TaskList_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.756cfff2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Card, InputGroup, FormControl } from 'react-bootstrap';\n\nexport class TaskList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      taskList: [],\n    };\n  }\n\n  newTask(taskName) {\n    const taskList = this.state.taskList.slice();\n    taskList.push(taskName);\n\n    this.setState({taskList: taskList});\n    this.taskNameInput.value = \"\";\n    this.taskNameInput.focus();\n  }\n\n  handleKeyPress(target) {\n    if(target.charCode === 13) {\n       this.newTask(this.taskNameInput.value);   \n    }\n  }\n\n  deleteTask(i) {\n    const taskList = i === 0\n      ? this.state.taskList.slice(1)\n      : this.state.taskList.slice(0, i).concat(this.state.taskList.slice(i+1));\n\n    this.setState({taskList: taskList});\n  }\n\n  renderTaskList() {\n    const output = [];\n\n    for (let i = 0; i < this.state.taskList.length; i++) {\n      output.push(\n        <Task key={i} onClick={() => this.deleteTask(i)} taskName={this.state.taskList[i]} />\n      );\n    }\n\n    return output;\n  }\n\n  render() {\n\n    return (\n      <Card style={{ width: '18rem' }}>\n        <Card.Body>\n          <Card.Title>\n            Task list\n          </Card.Title>\n          <InputGroup className=\"mb-3\">\n            <FormControl\n              placeholder=\"Task name\"\n              ref={(ref) => {this.taskNameInput = ref}}\n              onKeyPress={(target) => this.handleKeyPress(target)}\n            />\n            <InputGroup.Append>\n              <Button onClick={() => this.newTask(this.taskNameInput.value)}>+</Button>\n            </InputGroup.Append>\n          </InputGroup>\n          {this.renderTaskList()}\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport class Task extends Component {\n  render() {\n    return (\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          placeholder={this.props.taskName}\n          disabled\n        />\n        <InputGroup.Append>\n          <Button\n            onClick={this.props.onClick}\n            variant=\"outline-secondary\"\n          >\n            Delete\n          </Button>\n        </InputGroup.Append>\n      </InputGroup>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { TaskList } from './components/TaskList';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TaskList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}